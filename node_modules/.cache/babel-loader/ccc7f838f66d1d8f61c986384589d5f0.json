{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectSpread from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport seed from \"./seed\";\n\nconst board = (state = {\n  lists: []\n}, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const listId = action.payload.listId;\n        return {\n          lists: [...state.lists, listId]\n        };\n      }\n\n    case \"MOVE_LIST\":\n      {\n        const _action$payload = action.payload,\n              oldListIndex = _action$payload.oldListIndex,\n              newListIndex = _action$payload.newListIndex;\n        const newLists = Array.from(state.lists);\n\n        const _newLists$splice = newLists.splice(oldListIndex, 1),\n              _newLists$splice2 = _slicedToArray(_newLists$splice, 1),\n              removedList = _newLists$splice2[0];\n\n        newLists.splice(newListIndex, 0, removedList);\n        return {\n          lists: newLists\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const listId = action.payload.listId;\n\n        const filterDeleted = tmpListId => tmpListId !== listId;\n\n        const newLists = state.lists.filter(filterDeleted);\n        return {\n          lists: newLists\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst listsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const _action$payload2 = action.payload,\n              listId = _action$payload2.listId,\n              listTitle = _action$payload2.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [listId]: {\n            _id: listId,\n            title: listTitle,\n            cards: []\n          }\n        });\n      }\n\n    case \"CHANGE_LIST_TITLE\":\n      {\n        const _action$payload3 = action.payload,\n              listId = _action$payload3.listId,\n              listTitle = _action$payload3.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [listId]: _objectSpread(_objectSpread({}, state[listId]), {}, {\n            title: listTitle\n          })\n        });\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const listId = action.payload.listId;\n\n        const deletedList = state[listId],\n              restOfLists = _objectWithoutProperties(state, [listId].map(_toPropertyKey));\n\n        return restOfLists;\n      }\n\n    case \"ADD_CARD\":\n      {\n        const _action$payload4 = action.payload,\n              listId = _action$payload4.listId,\n              cardId = _action$payload4.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [listId]: _objectSpread(_objectSpread({}, state[listId]), {}, {\n            cards: [...state[listId].cards, cardId]\n          })\n        });\n      }\n\n    case \"MOVE_CARD\":\n      {\n        const _action$payload5 = action.payload,\n              oldCardIndex = _action$payload5.oldCardIndex,\n              newCardIndex = _action$payload5.newCardIndex,\n              sourceListId = _action$payload5.sourceListId,\n              destListId = _action$payload5.destListId,\n              btn_color = _action$payload5.btn_color; // Move within the same list\n\n        if (sourceListId === destListId) {\n          const newCards = Array.from(state[sourceListId].cards);\n\n          const _newCards$splice = newCards.splice(oldCardIndex, 1),\n                _newCards$splice2 = _slicedToArray(_newCards$splice, 1),\n                removedCard = _newCards$splice2[0];\n\n          newCards.splice(newCardIndex, 0, removedCard);\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [sourceListId]: _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n              cards: newCards\n            })\n          });\n        } // Move card from one list to another\n\n\n        const sourceCards = Array.from(state[sourceListId].cards);\n\n        const _sourceCards$splice = sourceCards.splice(oldCardIndex, 1),\n              _sourceCards$splice2 = _slicedToArray(_sourceCards$splice, 1),\n              removedCard = _sourceCards$splice2[0];\n\n        const destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [sourceListId]: _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n            cards: sourceCards\n          }),\n          [destListId]: _objectSpread(_objectSpread({}, state[destListId]), {}, {\n            cards: destinationCards\n          })\n        });\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const _action$payload6 = action.payload,\n              deletedCardId = _action$payload6.cardId,\n              listId = _action$payload6.listId;\n\n        const filterDeleted = cardId => cardId !== deletedCardId;\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [listId]: _objectSpread(_objectSpread({}, state[listId]), {}, {\n            cards: state[listId].cards.filter(filterDeleted)\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst cardsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_CARD\":\n      {\n        const _action$payload7 = action.payload,\n              cardText = _action$payload7.cardText,\n              cardId = _action$payload7.cardId,\n              btn_Color = _action$payload7.btn_Color;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [cardId]: {\n            text: cardText,\n            _id: cardId,\n            btn_color: btn_Color\n          }\n        }); //hector\n      }\n\n    case \"MOVE_CARD\":\n      {\n        console.log(state);\n        const _action$payload8 = action.payload,\n              cardText = _action$payload8.cardText,\n              cardId = _action$payload8.cardId,\n              btn_Color = _action$payload8.btn_Color;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [cardId]: {\n            text: cardText,\n            _id: cardId,\n            btn_color: btn_Color\n          }\n        }); //hector\n      }\n\n    case \"CHANGE_CARD_COLOR\":\n      {\n        const _action$payload9 = action.payload,\n              cardText = _action$payload9.cardText,\n              cardId = _action$payload9.cardId,\n              btn_Color = _action$payload9.btn_Color;\n        console.log(btn_Color);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [cardId]: {\n            text: cardText,\n            _id: cardId,\n            btn_color: btn_Color\n          }\n        });\n      }\n    //hector\n\n    /*\r\n    case \"CHANGE_CARD_COLOR\":{\r\n      const { Event, cardId } = action.payload;\r\n      return { ...state, [cardId]: { color: Event, _id: cardId } };\r\n    }*/\n\n    case \"CHANGE_CARD_TEXT\":\n      {\n        const _action$payload10 = action.payload,\n              cardText = _action$payload10.cardText,\n              cardId = _action$payload10.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [cardId]: _objectSpread(_objectSpread({}, state[cardId]), {}, {\n            text: cardText\n          })\n        });\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const cardId = action.payload.cardId;\n\n        const deletedCard = state[cardId],\n              restOfCards = _objectWithoutProperties(state, [cardId].map(_toPropertyKey));\n\n        return restOfCards;\n      }\n    // Find every card from the deleted list and remove it\n\n    case \"DELETE_LIST\":\n      {\n        const cardIds = action.payload.cards;\n        return Object.keys(state).filter(cardId => !cardIds.includes(cardId)).reduce((newState, cardId) => _objectSpread(_objectSpread({}, newState), {}, {\n          [cardId]: state[cardId]\n        }), {});\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  board,\n  listsById,\n  cardsById\n});\n\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (_unused) {// ignore write errors\n  }\n};\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst persistedState = loadState();\nconst store = createStore(reducers, persistedState);\nstore.subscribe(throttle(() => {\n  saveState(store.getState());\n}, 1000));\nconsole.log(store.getState());\n\nif (!store.getState().board.lists.length) {\n  console.log(\"SEED\");\n  seed(store);\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/ruizhou/Desktop/CIS499/navtask/src/store.js"],"names":["combineReducers","createStore","throttle","seed","board","state","lists","action","type","listId","payload","oldListIndex","newListIndex","newLists","Array","from","splice","removedList","filterDeleted","tmpListId","filter","listsById","listTitle","_id","title","cards","deletedList","restOfLists","cardId","oldCardIndex","newCardIndex","sourceListId","destListId","btn_color","newCards","removedCard","sourceCards","destinationCards","deletedCardId","cardsById","cardText","btn_Color","text","console","log","deletedCard","restOfCards","cardIds","Object","keys","includes","reduce","newState","reducers","saveState","serializedState","JSON","stringify","localStorage","setItem","loadState","getItem","undefined","parse","err","persistedState","store","subscribe","getState","length"],"mappings":"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","sourcesContent":["import { combineReducers, createStore } from \"redux\";\r\nimport throttle from \"lodash.throttle\";\r\nimport seed from \"./seed\";\r\n\r\nconst board = (state = { lists: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_LIST\": {\r\n      const { listId } = action.payload;\r\n      return { lists: [...state.lists, listId] };\r\n    }\r\n    case \"MOVE_LIST\": {\r\n      const { oldListIndex, newListIndex } = action.payload;\r\n      const newLists = Array.from(state.lists);\r\n      const [removedList] = newLists.splice(oldListIndex, 1);\r\n      newLists.splice(newListIndex, 0, removedList);\r\n      return { lists: newLists };\r\n    }\r\n    case \"DELETE_LIST\": {\r\n      const { listId } = action.payload;\r\n      const filterDeleted = tmpListId => tmpListId !== listId;\r\n      const newLists = state.lists.filter(filterDeleted);\r\n      return { lists: newLists };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst listsById = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_LIST\": {\r\n      const { listId, listTitle } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { _id: listId, title: listTitle, cards: [] }\r\n      };\r\n    }\r\n    \r\n    \r\n    case \"CHANGE_LIST_TITLE\": {\r\n      const { listId, listTitle } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title: listTitle }\r\n      };\r\n    }\r\n    case \"DELETE_LIST\": {\r\n      const { listId } = action.payload;\r\n      const { [listId]: deletedList, ...restOfLists } = state;\r\n      return restOfLists;\r\n    }\r\n    case \"ADD_CARD\": {\r\n      \r\n      const { listId, cardId } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], cards: [...state[listId].cards, cardId] }\r\n      };\r\n    }\r\n    case \"MOVE_CARD\": {\r\n      const {\r\n        oldCardIndex,\r\n        newCardIndex,\r\n        sourceListId,\r\n        destListId,\r\n        btn_color\r\n      } = action.payload;\r\n      // Move within the same list\r\n      \r\n      if (sourceListId === destListId) {\r\n        const newCards = Array.from(state[sourceListId].cards);\r\n        const [removedCard] = newCards.splice(oldCardIndex, 1);\r\n        newCards.splice(newCardIndex, 0, removedCard);\r\n        return {\r\n          ...state,\r\n          [sourceListId]: { ...state[sourceListId], cards: newCards }\r\n        };\r\n      }\r\n      // Move card from one list to another\r\n      \r\n      const sourceCards = Array.from(state[sourceListId].cards);\r\n      \r\n      const [removedCard] = sourceCards.splice(oldCardIndex, 1);\r\n      const destinationCards = Array.from(state[destListId].cards);\r\n      destinationCards.splice(newCardIndex, 0, removedCard);\r\n      \r\n      return {\r\n        ...state,\r\n        [sourceListId]: { ...state[sourceListId], cards: sourceCards },\r\n        [destListId]: { ...state[destListId], cards: destinationCards }\r\n      };\r\n    }\r\n    case \"DELETE_CARD\": {\r\n      const { cardId: deletedCardId, listId } = action.payload;\r\n      const filterDeleted = cardId => cardId !== deletedCardId;\r\n      return {\r\n        ...state,\r\n        [listId]: {\r\n          ...state[listId],\r\n          cards: state[listId].cards.filter(filterDeleted)\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst cardsById = (state = {}, action) => {\r\n  \r\n  switch (action.type) {\r\n    case \"ADD_CARD\": {\r\n      \r\n      const { cardText, cardId ,btn_Color } = action.payload;\r\n      return { ...state, [cardId]: { text: cardText, _id: cardId ,btn_color: btn_Color  } };//hector\r\n    }\r\n    \r\n    case \"MOVE_CARD\":{\r\n      console.log(state);\r\n      const { cardText, cardId ,btn_Color } = action.payload;\r\n      return { ...state, [cardId]: { text: cardText, _id: cardId ,btn_color: btn_Color  } };//hector\r\n    }\r\n    case \"CHANGE_CARD_COLOR\":{\r\n      \r\n      const { cardText, cardId ,btn_Color } = action.payload;\r\n      console.log(btn_Color)\r\n      return { ...state, [cardId]: { text: cardText, _id: cardId ,btn_color: btn_Color  } };\r\n    }//hector\r\n    /*\r\n    case \"CHANGE_CARD_COLOR\":{\r\n      const { Event, cardId } = action.payload;\r\n      return { ...state, [cardId]: { color: Event, _id: cardId } };\r\n    }*/\r\n    case \"CHANGE_CARD_TEXT\": {\r\n      const { cardText, cardId } = action.payload;\r\n      return { ...state, [cardId]: { ...state[cardId], text: cardText } };\r\n    }\r\n    case \"DELETE_CARD\": {\r\n      const { cardId } = action.payload;\r\n      const { [cardId]: deletedCard, ...restOfCards } = state;\r\n      return restOfCards;\r\n    }\r\n    // Find every card from the deleted list and remove it\r\n    case \"DELETE_LIST\": {\r\n      const { cards: cardIds } = action.payload;\r\n      return Object.keys(state)\r\n        .filter(cardId => !cardIds.includes(cardId))\r\n        .reduce(\r\n          (newState, cardId) => ({ ...newState, [cardId]: state[cardId] }),\r\n          {}\r\n        );\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  board,\r\n  listsById,\r\n  cardsById\r\n});\r\n\r\nconst saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst persistedState = loadState();\r\nconst store = createStore(reducers, persistedState);\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState(store.getState());\r\n  }, 1000)\r\n);\r\n\r\nconsole.log(store.getState());\r\nif (!store.getState().board.lists.length) {\r\n  console.log(\"SEED\");\r\n  seed(store);\r\n}\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}