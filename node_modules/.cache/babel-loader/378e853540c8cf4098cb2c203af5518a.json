{"ast":null,"code":"import _objectSpread from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ruizhou/Desktop/CIS499/navtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/ruizhou/Desktop/CIS499/navtask/src/components/Card.js\";\nimport \"../styles/Card.css\"; //import { PropTypes } from 'react'\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport CardEditor from \"./CardEditor\"; //import EditButtons from \"./EditButtons\";\n//import PropTypes from 'prop-types'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Card extends Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      hover: false,\n      editing: false,\n      //color bttton颜色的初始值\n      btn: ''\n    };\n\n    this.startHover = () => this.setState({\n      hover: true\n    });\n\n    this.endHover = () => this.setState({\n      hover: false\n    });\n\n    this.startEditing = () => {\n      this.setState({\n        hover: false,\n        editing: true,\n        text: this.props.card.text\n      });\n    };\n\n    this.endEditing = () => this.setState({\n      hover: false,\n      editing: false,\n      color: false\n    });\n\n    this.editCard = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n        var _this$props, card, dispatch;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, card = _this$props.card, dispatch = _this$props.dispatch;\n\n              _this.endEditing();\n\n              dispatch({\n                type: \"CHANGE_CARD_TEXT\",\n                payload: {\n                  cardId: card._id,\n                  cardText: text\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.deleteCard = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _this$props2, listId, card, dispatch;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _this$props2 = _this.props, listId = _this$props2.listId, card = _this$props2.card, dispatch = _this$props2.dispatch;\n            dispatch({\n              type: \"DELETE_CARD\",\n              payload: {\n                cardId: card._id,\n                listId\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    this.changeColor = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(Event) {\n        var _this$props3, card, dispatch;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                btn: Event\n              });\n\n              _this$props3 = _this.props, card = _this$props3.card, dispatch = _this$props3.dispatch;\n              dispatch({\n                type: \"CHANGE_CARD_COLOR\",\n                payload: {\n                  cardText: card.text,\n                  cardId: card._id,\n                  btn_Color: Event\n                }\n              }); //changeColor: this.props.color ? blue : red\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          card = _this$props4.card,\n          index = _this$props4.index; // btn 就是延续button的信息\n\n    const _this$state = this.state,\n          hover = _this$state.hover,\n          editing = _this$state.editing,\n          btn_color = _this$state.btn_color;\n\n    if (!editing) {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: card._id,\n        index: index,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n          ref: provided.innerRef\n        }, provided.draggableProps), provided.dragHandleProps), {}, {\n          className: \"Card\",\n          onMouseEnter: this.startHover,\n          onMouseLeave: this.endHover //style={{border: `2px solid ${btn}`}}\n          //style ={this.btn()}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              //border: `2px solid ${btn}`,\n              height: 20,\n              width: 20,\n              backgroundColor: card.btn_color //hector\n\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), hover && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Card-Icons\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Card-Icon\",\n              onClick: this.startEditing,\n              children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n                name: \"create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), card.text]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(CardEditor, {\n        text: card.text,\n        onSave: this.editCard,\n        onDelete: this.deleteCard,\n        onCancel: this.endEditing //onColor（call color function）\n        ,\n        onColor: this.changeColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  card: state.cardsById[ownProps.cardId]\n});\n\nexport default connect(mapStateToProps)(Card);","map":{"version":3,"sources":["/Users/ruizhou/Desktop/CIS499/navtask/src/components/Card.js"],"names":["React","Component","connect","Draggable","CardEditor","Card","state","hover","editing","btn","startHover","setState","endHover","startEditing","text","props","card","endEditing","color","editCard","dispatch","type","payload","cardId","_id","cardText","deleteCard","listId","changeColor","Event","btn_Color","render","index","btn_color","provided","innerRef","draggableProps","dragHandleProps","height","width","backgroundColor","mapStateToProps","ownProps","cardsById"],"mappings":"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","sourcesContent":["import \"../styles/Card.css\";\r\n//import { PropTypes } from 'react'\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport CardEditor from \"./CardEditor\";\r\n//import EditButtons from \"./EditButtons\";\r\n//import PropTypes from 'prop-types'\r\n\r\nclass Card extends Component {\r\n\r\n  state = {\r\n    hover: false,\r\n    editing: false,\r\n    //color bttton颜色的初始值\r\n    btn:''\r\n    \r\n  };\r\n  \r\n  startHover = () => this.setState({ hover: true });\r\n  endHover = () => this.setState({ hover: false });\r\n\r\n  startEditing = () =>\r\n  {\r\n    \r\n    this.setState({\r\n      hover: false,\r\n      editing: true,\r\n      text: this.props.card.text,\r\n      \r\n    });\r\n  }\r\n    \r\n\r\n  endEditing = () => this.setState({ hover: false, editing: false , color:false});\r\n\r\n  editCard = async text => {\r\n    const { card, dispatch } = this.props;\r\n\r\n    this.endEditing();\r\n\r\n    dispatch({\r\n      type: \"CHANGE_CARD_TEXT\",\r\n      payload: { cardId: card._id, cardText: text }\r\n    });\r\n  };\r\n\r\n  deleteCard = async () => {\r\n    const { listId, card, dispatch } = this.props;\r\n\r\n    dispatch({\r\n      type: \"DELETE_CARD\",\r\n      payload: { cardId: card._id, listId }\r\n    });\r\n  };\r\n  //loadstate\r\n  \r\n \r\n\r\n //change color function （改变颜色的function）\r\nchangeColor = async (Event) =>{\r\n  \r\n  this.setState({btn:Event});\r\n  \r\n  const {card,dispatch} = this.props;\r\n  dispatch( {\r\n    \r\n    type: \"CHANGE_CARD_COLOR\",\r\n    payload: {cardText:card.text, cardId: card._id, btn_Color: Event }\r\n  });\r\n  //changeColor: this.props.color ? blue : red\r\n}\r\n\r\n\r\n  render() {\r\n    const { card, index  } = this.props;\r\n    // btn 就是延续button的信息\r\n    const { hover, editing, btn_color } = this.state;\r\n    \r\n    \r\n    if (!editing) {\r\n      return (\r\n        <Draggable draggableId={card._id} index={index}>\r\n          {(provided) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              className=\"Card\"\r\n              onMouseEnter={this.startHover}\r\n              onMouseLeave={this.endHover}\r\n              //style={{border: `2px solid ${btn}`}}\r\n              //style ={this.btn()}\r\n            >\r\n              <button style={{\r\n                //border: `2px solid ${btn}`,\r\n                height:20,\r\n                width: 20,\r\n                backgroundColor: card.btn_color,//hector\r\n                \r\n                }}>\r\n                      </button>\r\n              {hover && (\r\n                <div className=\"Card-Icons\">\r\n                  <div className=\"Card-Icon\" onClick={this.startEditing}>\r\n                    <ion-icon name=\"create\" />\r\n                    \r\n                  </div>\r\n                  \r\n                  \r\n                </div>\r\n              )}\r\n              \r\n              {card.text}\r\n            </div>\r\n          )}\r\n        </Draggable>\r\n      );\r\n    } else {\r\n      return (\r\n        <CardEditor\r\n          text={card.text}\r\n          onSave={this.editCard}\r\n          onDelete={this.deleteCard}\r\n          onCancel={this.endEditing}\r\n          //onColor（call color function）\r\n          onColor={this.changeColor}\r\n          \r\n        />\r\n\r\n        \r\n      );\r\n\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  card: state.cardsById[ownProps.cardId]\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Card);\r\n"]},"metadata":{},"sourceType":"module"}